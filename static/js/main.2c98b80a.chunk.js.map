{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","e","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","App","state","localHabit","item","setState","localCount","localHabits","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c98b80a.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nclass Habit extends PureComponent {\n  // 컴포넌트가 UI상에 등록이 되었을 때,\n  // 사용자에게 보여질 때 호출이 된다\n  componentDidMount() {\n    // console.log(`habit: ${this.props.habit.name} mounter`);\n  }\n  // 지우기 전에 호출이 된다.\n  componentWillUnmount() {\n    // console.log(`habit: ${this.props.habit.name} will mounter`);\n  }\n\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n  render() {\n    const { name, count } = this.props.habit;\n    return (\n      <li>\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React, { memo } from \"react\";\n\n// function HabitAddForm(props) { }\n// 위처럼 작성하여도 괜찮고, 아래처럼 rci를 하여도 괜찮다.\nconst HabitAddForm = memo((props) => {\n  // Dom 요소에 접근하지 않고 필요할 때 createRef() 정의한 다음 해당하는 리엑트 컴포넌트에 연결하면 된다.\n  const formRef = React.createRef();\n  const inputRef = React.createRef();\n  const onSubmit = (e) => {\n    // 페이지가 리프레시가 되거나 다른페이지로 가는 것을 예상하고 리프레시가 발생\n    // preventDefault() 브라우저의 기본 기능을 취소시킴\n    e.preventDefault();\n    // console.log(this.inputRef.current.value)\n    const name = inputRef.current.value;\n    name && props.onAdd(name);\n    // this.inputRef.current.value = '';\n    formRef.current.reset();\n  };\n  return (\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"add-input\"\n        placeholder=\"Habit\"\n      />\n      <button className=\"add-button\">Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\nimport HabitAddForm from \"./habitAddForm\";\n\nclass Habits extends Component {\n  handleIncrement = (habit) => {\n    this.props.onIncrement(habit);\n  };\n  handleDecrement = (habit) => {\n    this.props.onDecrement(habit);\n  };\n  handleDelete = (habit) => {\n    this.props.onDelete(habit);\n  };\n  handleAdd = (name) => {\n    this.props.onAdd(name);\n  };\n  render() {\n    return (\n      <div>\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map((habit) => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          ))}\n        </ul>\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { PureComponent } from \"react\";\n\nclass Navbar extends PureComponent {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n  handleIncrement = (habit) => {\n    // const localHabit = [...this.state.habits];\n    // Spread Syntax:\n    // habits의 배열과 똑같이 새로운 것을 만듬\n    // const localHabit = [...this.state.habits];\n    // const index = localHabit.indexOf(habit);\n    // localHabit[index].count++;\n\n    // 기존의 state.habits을 빙글빙글 돌면서(map) 새로운 habit을 만드는데\n    // 아이디가 똑같으면 새로운 habit에서 오브젝트를 만드는데\n    // 대신에 counst만 1을 증가한다\n    // 아이디가 다르면 return\n    const localHabit = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n\n    this.setState({ habits: localHabit });\n  };\n\n  handleDecrement = (habit) => {\n    // const localHabit = [...this.state.habits];\n    // const index = localHabit.indexOf(habit);\n    // const localCount = localHabit[index].count - 1;\n    // localHabit[index].count = localCount < 1 ? 0 : localCount;\n    const localHabit = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const localCount = habit.count - 1;\n        return { ...habit, count: habit.count < 1 ? 0 : localCount };\n      }\n      return item;\n    });\n    this.setState({ habits: localHabit });\n  };\n\n  handleDelete = (habit) => {\n    // 선택하지 않은 요소들을 골라 새로운 배열을 만든다.\n    const localHabits = this.state.habits.filter(\n      (item) => item.id !== habit.id\n    );\n    this.setState({ habits: localHabits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name: name, count: 0 },\n    ];\n    this.setState({ habits: habits });\n  };\n\n  handleReset = () => {\n    // const habits = this.state.habits.map((habit) => {\n    //   habit.count = 0;\n    //   return habit;\n    // });\n    const localHabit = this.state.habits.map((item) => {\n      if (item.count !== 0) {\n        return { ...item, count: 0 };\n      }\n      return item;\n    });\n    this.setState({ habits: localHabit });\n  };\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\n// 1. react-dom이라는 라이브러리에서 ReactDom 클래스를 가져온다.(import)\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// app.jsx 연결\nimport App from \"./app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\nimport SimpleHabit from \"./components/simpleHabit\";\n\n// 2. 가져온 class에 있는 rander 함수를 이용해서\nReactDOM.render(\n  // React.StrictMode 생략가능 대신 <App />, 이렇게 작성\n  <React.StrictMode>\n    {/*app.jsx에 있는 App이라는 컴포넌트에 연결한다.*/}\n    <App />\n  </React.StrictMode>,\n  // 3. document에 root라는 아이디를 가진 요소에 제일 상위에 있는 App이라는 컴포넌트를 연결\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}